// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tasks.proto

package tasks

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Priority is an enum used to describe task priority levels
type Priority int32

const (
	Priority_Low    Priority = 0
	Priority_Medium Priority = 1
	Priority_High   Priority = 2
)

var Priority_name = map[int32]string{
	0: "Low",
	1: "Medium",
	2: "High",
}

var Priority_value = map[string]int32{
	"Low":    0,
	"Medium": 1,
	"High":   2,
}

func (x Priority) String() string {
	return proto.EnumName(Priority_name, int32(x))
}

func (Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}

//IDRequest is a message used for identifying a task
type IDRequest struct {
	//id is the id of the task to retrieve
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDRequest) Reset()         { *m = IDRequest{} }
func (m *IDRequest) String() string { return proto.CompactTextString(m) }
func (*IDRequest) ProtoMessage()    {}
func (*IDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}

func (m *IDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDRequest.Unmarshal(m, b)
}
func (m *IDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDRequest.Marshal(b, m, deterministic)
}
func (m *IDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRequest.Merge(m, src)
}
func (m *IDRequest) XXX_Size() int {
	return xxx_messageInfo_IDRequest.Size(m)
}
func (m *IDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDRequest proto.InternalMessageInfo

func (m *IDRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//Task is a generic task message
type Task struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Category             string   `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Priority             Priority `protobuf:"varint,4,opt,name=priority,proto3,enum=tasks.Priority" json:"priority,omitempty"`
	Content              string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	DueDate              string   `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{1}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Task) GetPriority() Priority {
	if m != nil {
		return m.Priority
	}
	return Priority_Low
}

func (m *Task) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Task) GetDueDate() string {
	if m != nil {
		return m.DueDate
	}
	return ""
}

func init() {
	proto.RegisterEnum("tasks.Priority", Priority_name, Priority_value)
	proto.RegisterType((*IDRequest)(nil), "tasks.IDRequest")
	proto.RegisterType((*Task)(nil), "tasks.Task")
}

func init() { proto.RegisterFile("tasks.proto", fileDescriptor_b3834c8ef8464a3f) }

var fileDescriptor_b3834c8ef8464a3f = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xed, 0x4a, 0xe3, 0x40,
	0x14, 0xed, 0xa4, 0x69, 0x9a, 0xde, 0x42, 0x37, 0x5c, 0x96, 0x25, 0xdb, 0xfe, 0x29, 0x61, 0x61,
	0xab, 0x42, 0x22, 0xd5, 0x37, 0xb0, 0x82, 0x42, 0x05, 0x89, 0xfa, 0x5b, 0xa6, 0x9d, 0x6b, 0x1c,
	0xfa, 0x31, 0x31, 0xb9, 0x51, 0xfa, 0x4a, 0x3e, 0x9f, 0x0f, 0x20, 0x4d, 0xda, 0x22, 0xd5, 0xfe,
	0x3c, 0x1f, 0x73, 0x38, 0x73, 0x0f, 0xb4, 0x59, 0xe6, 0xb3, 0x3c, 0x4c, 0x33, 0xc3, 0x06, 0x1b,
	0x25, 0xe8, 0xf6, 0x12, 0x63, 0x92, 0x39, 0x45, 0x25, 0x39, 0x29, 0x9e, 0x22, 0x5a, 0xa4, 0xbc,
	0xaa, 0x3c, 0x41, 0x0f, 0x5a, 0xd7, 0xa3, 0x98, 0x5e, 0x0a, 0xca, 0x19, 0x3b, 0x60, 0x69, 0xe5,
	0x8b, 0xbe, 0x18, 0xd4, 0x63, 0x4b, 0xab, 0xe0, 0x5d, 0x80, 0x7d, 0x2f, 0xf3, 0xd9, 0xbe, 0x80,
	0xbf, 0xa1, 0xc1, 0x9a, 0xe7, 0xe4, 0x5b, 0x7d, 0x31, 0x68, 0xc5, 0x15, 0xc0, 0x2e, 0xb8, 0x53,
	0xc9, 0x94, 0x98, 0x6c, 0xe5, 0xd7, 0x4b, 0x61, 0x87, 0xf1, 0x04, 0xdc, 0x34, 0xd3, 0x26, 0xd3,
	0xbc, 0xf2, 0xed, 0xbe, 0x18, 0x74, 0x86, 0xbf, 0xc2, 0xaa, 0xeb, 0xed, 0x86, 0x8e, 0x77, 0x06,
	0xf4, 0xa1, 0x39, 0x35, 0x4b, 0xa6, 0x25, 0xfb, 0x8d, 0x32, 0x67, 0x0b, 0xf1, 0x2f, 0xb8, 0xaa,
	0xa0, 0x47, 0x25, 0x99, 0x7c, 0xa7, 0x92, 0x54, 0x41, 0x23, 0xc9, 0x74, 0x7c, 0x04, 0xee, 0x36,
	0x0a, 0x9b, 0x50, 0x1f, 0x9b, 0x37, 0xaf, 0x86, 0x00, 0xce, 0x0d, 0x29, 0x5d, 0x2c, 0x3c, 0x81,
	0x2e, 0xd8, 0x57, 0x3a, 0x79, 0xf6, 0xac, 0xe1, 0x87, 0x80, 0xf6, 0xfa, 0x5f, 0x77, 0x94, 0xbd,
	0xea, 0x29, 0xe1, 0x3f, 0x70, 0x2e, 0x32, 0x92, 0x4c, 0xd8, 0xde, 0x94, 0x5a, 0xab, 0xdd, 0xaf,
	0x20, 0xa8, 0xe1, 0x7f, 0xb0, 0x63, 0x92, 0x0a, 0xbd, 0x0d, 0xbd, 0xbb, 0xdb, 0xbe, 0x31, 0x02,
	0xe7, 0x21, 0x55, 0xdf, 0xe2, 0xfe, 0x84, 0xd5, 0x10, 0xe1, 0x76, 0x88, 0xf0, 0x72, 0x3d, 0x44,
	0x50, 0xc3, 0x73, 0x70, 0x46, 0x34, 0x27, 0xa6, 0x1f, 0xb2, 0x0f, 0xbf, 0x8a, 0xc0, 0x1e, 0xeb,
	0x9c, 0xf1, 0x80, 0x63, 0xaf, 0xd5, 0xa9, 0x98, 0x38, 0xa5, 0xe1, 0xec, 0x33, 0x00, 0x00, 0xff,
	0xff, 0x01, 0x95, 0x3e, 0x3b, 0x25, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	Read(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Task, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TaskService_ListClient, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Read(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TaskService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/tasks.TaskService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_ListClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type taskServiceListClient struct {
	grpc.ClientStream
}

func (x *taskServiceListClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	Create(context.Context, *Task) (*Task, error)
	Read(context.Context, *IDRequest) (*Task, error)
	Update(context.Context, *Task) (*empty.Empty, error)
	Delete(context.Context, *IDRequest) (*empty.Empty, error)
	List(*empty.Empty, TaskService_ListServer) error
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Create(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Read(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Delete(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).List(m, &taskServiceListServer{stream})
}

type TaskService_ListServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type taskServiceListServer struct {
	grpc.ServerStream
}

func (x *taskServiceListServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TaskService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TaskService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _TaskService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tasks.proto",
}
