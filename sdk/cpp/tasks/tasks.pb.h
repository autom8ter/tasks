// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tasks.proto

#ifndef PROTOBUF_INCLUDED_tasks_2eproto
#define PROTOBUF_INCLUDED_tasks_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tasks_2eproto 

namespace protobuf_tasks_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tasks_2eproto
namespace tasks {
class IDRequest;
class IDRequestDefaultTypeInternal;
extern IDRequestDefaultTypeInternal _IDRequest_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace tasks
namespace google {
namespace protobuf {
template<> ::tasks::IDRequest* Arena::CreateMaybeMessage<::tasks::IDRequest>(Arena*);
template<> ::tasks::Task* Arena::CreateMaybeMessage<::tasks::Task>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tasks {

enum Priority {
  Low = 0,
  Medium = 1,
  High = 2,
  Priority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Priority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Priority_IsValid(int value);
const Priority Priority_MIN = Low;
const Priority Priority_MAX = High;
const int Priority_ARRAYSIZE = Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Priority_descriptor();
inline const ::std::string& Priority_Name(Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Priority_descriptor(), value);
}
inline bool Priority_Parse(
    const ::std::string& name, Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Priority>(
    Priority_descriptor(), name, value);
}
// ===================================================================

class IDRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tasks.IDRequest) */ {
 public:
  IDRequest();
  virtual ~IDRequest();

  IDRequest(const IDRequest& from);

  inline IDRequest& operator=(const IDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IDRequest(IDRequest&& from) noexcept
    : IDRequest() {
    *this = ::std::move(from);
  }

  inline IDRequest& operator=(IDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDRequest* internal_default_instance() {
    return reinterpret_cast<const IDRequest*>(
               &_IDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IDRequest* other);
  friend void swap(IDRequest& a, IDRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IDRequest* New() const final {
    return CreateMaybeMessage<IDRequest>(NULL);
  }

  IDRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IDRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IDRequest& from);
  void MergeFrom(const IDRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tasks.IDRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tasks.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(NULL);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string due_date = 6;
  void clear_due_date();
  static const int kDueDateFieldNumber = 6;
  const ::std::string& due_date() const;
  void set_due_date(const ::std::string& value);
  #if LANG_CXX11
  void set_due_date(::std::string&& value);
  #endif
  void set_due_date(const char* value);
  void set_due_date(const char* value, size_t size);
  ::std::string* mutable_due_date();
  ::std::string* release_due_date();
  void set_allocated_due_date(::std::string* due_date);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .tasks.Priority priority = 4;
  void clear_priority();
  static const int kPriorityFieldNumber = 4;
  ::tasks::Priority priority() const;
  void set_priority(::tasks::Priority value);

  // @@protoc_insertion_point(class_scope:tasks.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr due_date_;
  ::google::protobuf::int64 id_;
  int priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tasks_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IDRequest

// int64 id = 1;
inline void IDRequest::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IDRequest::id() const {
  // @@protoc_insertion_point(field_get:tasks.IDRequest.id)
  return id_;
}
inline void IDRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tasks.IDRequest.id)
}

// -------------------------------------------------------------------

// Task

// int64 id = 1;
inline void Task::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Task::id() const {
  // @@protoc_insertion_point(field_get:tasks.Task.id)
  return id_;
}
inline void Task::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tasks.Task.id)
}

// string title = 2;
inline void Task::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::title() const {
  // @@protoc_insertion_point(field_get:tasks.Task.title)
  return title_.GetNoArena();
}
inline void Task::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tasks.Task.title)
}
#if LANG_CXX11
inline void Task::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tasks.Task.title)
}
#endif
inline void Task::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tasks.Task.title)
}
inline void Task::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tasks.Task.title)
}
inline ::std::string* Task::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:tasks.Task.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_title() {
  // @@protoc_insertion_point(field_release:tasks.Task.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:tasks.Task.title)
}

// string category = 3;
inline void Task::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::category() const {
  // @@protoc_insertion_point(field_get:tasks.Task.category)
  return category_.GetNoArena();
}
inline void Task::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tasks.Task.category)
}
#if LANG_CXX11
inline void Task::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tasks.Task.category)
}
#endif
inline void Task::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tasks.Task.category)
}
inline void Task::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tasks.Task.category)
}
inline ::std::string* Task::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:tasks.Task.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_category() {
  // @@protoc_insertion_point(field_release:tasks.Task.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:tasks.Task.category)
}

// .tasks.Priority priority = 4;
inline void Task::clear_priority() {
  priority_ = 0;
}
inline ::tasks::Priority Task::priority() const {
  // @@protoc_insertion_point(field_get:tasks.Task.priority)
  return static_cast< ::tasks::Priority >(priority_);
}
inline void Task::set_priority(::tasks::Priority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:tasks.Task.priority)
}

// string content = 5;
inline void Task::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::content() const {
  // @@protoc_insertion_point(field_get:tasks.Task.content)
  return content_.GetNoArena();
}
inline void Task::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tasks.Task.content)
}
#if LANG_CXX11
inline void Task::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tasks.Task.content)
}
#endif
inline void Task::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tasks.Task.content)
}
inline void Task::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tasks.Task.content)
}
inline ::std::string* Task::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tasks.Task.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_content() {
  // @@protoc_insertion_point(field_release:tasks.Task.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tasks.Task.content)
}

// string due_date = 6;
inline void Task::clear_due_date() {
  due_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::due_date() const {
  // @@protoc_insertion_point(field_get:tasks.Task.due_date)
  return due_date_.GetNoArena();
}
inline void Task::set_due_date(const ::std::string& value) {
  
  due_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tasks.Task.due_date)
}
#if LANG_CXX11
inline void Task::set_due_date(::std::string&& value) {
  
  due_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tasks.Task.due_date)
}
#endif
inline void Task::set_due_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  due_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tasks.Task.due_date)
}
inline void Task::set_due_date(const char* value, size_t size) {
  
  due_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tasks.Task.due_date)
}
inline ::std::string* Task::mutable_due_date() {
  
  // @@protoc_insertion_point(field_mutable:tasks.Task.due_date)
  return due_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_due_date() {
  // @@protoc_insertion_point(field_release:tasks.Task.due_date)
  
  return due_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_due_date(::std::string* due_date) {
  if (due_date != NULL) {
    
  } else {
    
  }
  due_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), due_date);
  // @@protoc_insertion_point(field_set_allocated:tasks.Task.due_date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tasks

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tasks::Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tasks::Priority>() {
  return ::tasks::Priority_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tasks_2eproto
