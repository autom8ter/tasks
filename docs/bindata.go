package docs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xc9\x48\xcd\x4d\xb5\x52\xc8\x4a\xcd\xae\xcc\xc9\xd1\x05\xf3\x74\x73\x33\x53\xf2\x32\xd3\x33\x4a\x00\x01\x00\x00\xff\xff\x4c\x27\x3d\x30\x1c\x00\x00\x00")

func config_yml() ([]byte, error) {
	return bindata_read(
		_config_yml,
		"_config.yml",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _gen_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\x50\xd0\x2d\xc8\x4e\x57\x48\xc9\x4f\x2e\x56\xd0\xd3\xd7\xd3\xd3\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x05\x8b\x71\x01\x02\x00\x00\xff\xff\x8a\x3d\x44\x8a\x38\x00\x00\x00")

func gen_go() ([]byte, error) {
	return bindata_read(
		_gen_go,
		"gen.go",
	)
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6e\x1b\xb9\x15\xbe\xf7\x53\x9c\x2a\x28\xd0\xc5\x46\x1a\x59\x96\x15\x57\x19\x4f\xb1\x4d\xb2\x68\x8a\x24\x0d\x62\xa7\x40\x6f\x5a\x50\xc3\x33\x1a\xc2\x14\xa9\x25\x39\x8a\xd5\xa2\x40\xdf\xa1\x6f\xd8\x27\x29\x38\x3f\x12\x47\xc3\x19\x59\xb2\xe3\x78\x17\x0b\x5f\x68\x86\x3f\xe7\xff\x9c\xef\x90\x96\xc2\xdf\xbc\xfe\xcb\xab\xeb\xbf\x7d\x7c\x03\xa9\x59\xf0\xe8\xe4\x24\x2c\x3e\x01\xc2\x14\x09\xb5\x0f\x00\xa1\x61\x86\x63\xf4\x51\x49\x23\x63\xc9\xe1\xb5\x8c\xb3\x05\x0a\x43\x0c\x93\x22\x0c\x8a\xd9\x62\xe5\x02\x0d\x81\x38\x25\x4a\xa3\xb9\xec\x7d\xbe\xfe\xb1\x7f\xd1\x2b\xa7\x38\x13\x37\xa0\x90\x5f\xf6\xb4\x59\x73\xd4\x29\xa2\xe9\x81\x59\x2f\xf1\xb2\x67\xf0\xd6\x04\xb1\xd6\x3d\x48\x15\x26\x97\xbd\xd4\x98\xa5\x9e\x06\x41\x22\x85\xd1\x83\xb9\x94\x73\x8e\x64\xc9\xf4\x20\x96\x0b\xbb\xee\x0f\x09\x59\x30\xbe\xbe\xfc\x3c\xcb\x84\xc9\xa6\xe3\xe1\xf0\xf9\x8b\xe1\xf0\xf9\x78\x38\x64\x86\x70\x16\xf7\x82\x92\x69\xce\xaa\x78\x06\x98\x49\xba\x86\x7f\x95\x2f\x00\x5f\x18\x35\xe9\x14\x26\x43\x5c\xbc\xdc\x0c\x2e\x88\x9a\x33\x31\x85\x53\x5c\x00\xc9\x8c\xdc\xce\xc4\x92\x4b\x35\x85\x67\xa3\xd1\x68\x3b\x68\x05\xec\x17\xc2\x4c\xa1\x57\x88\xd3\x7b\x0e\x9a\x08\xdd\xd7\xa8\x58\xb2\x5d\xba\x24\x94\x32\x31\xef\xcf\xa4\x31\x72\x31\x85\xf1\x96\xed\xbf\x4f\xca\x87\xf4\xd4\x91\x2f\xa7\xfd\x05\xd9\x3c\x35\x53\x10\x52\x2d\x08\xdf\x52\x9b\x49\x45\x51\x6d\x88\x9d\x2e\x6f\x41\x4b\xce\x28\x3c\x23\x84\xb4\x33\x1d\x0e\xce\xf1\xb6\xc9\x76\xe4\xb0\x7d\x08\xca\x8e\x1d\x07\xe7\xb8\x80\x61\x93\xe5\xd9\x37\xd1\x94\x38\x5c\x6d\xd0\xf5\x29\xc6\x52\xe5\x81\x6c\x39\x0b\x6c\xfa\xfb\x7c\xf2\x02\x47\xe7\x0d\x4a\x86\xcc\x38\x36\xa3\xe9\x74\x38\xfc\xed\x4e\x78\x68\xf6\x4f\x9c\xc2\x85\x3b\x5e\xea\x14\x4b\xce\xc9\x52\xe3\x14\xaa\xa7\x26\x1b\x9b\x86\x6d\xa6\x7a\x31\x1c\x3a\x34\x49\x7c\x33\x57\x32\x13\xb4\x5f\x89\x4e\x63\xfb\xd7\xa4\x99\x27\x82\x51\x53\x61\xd2\x7e\x9c\x32\x4e\x7f\x87\x2b\x14\xdf\xb9\x41\xd0\x24\x96\xcc\xec\x5f\x93\x18\x6d\xc4\x4e\xcd\x49\x71\x1c\x37\x9c\x54\x7a\x07\x46\x1e\x0f\x19\x0a\xcb\x5d\x27\x31\x41\x51\x98\x3c\x29\x9b\x11\xd6\x8c\x2d\x4b\xc2\xd1\xed\xf4\xbb\x36\x7a\xc3\x97\x00\xbb\x9b\xab\x81\x41\xc2\x90\xd3\x7e\xe1\x66\x43\x77\xe8\x6d\x96\x39\x8e\x77\xf3\x79\x1f\x8d\xd1\x03\xd0\x38\xf3\xd2\x98\x1c\x42\x62\xec\x25\xe1\xd6\xbd\xa6\x5d\xf0\xd6\xa0\xd0\x4c\x8a\x7b\xda\xa6\x93\xce\x01\xf6\xe9\xa4\xe3\xb7\xd1\xe1\x74\xfc\x86\x3a\x3f\x94\xcc\xf9\x31\xf6\x16\xd9\xe2\xbe\xa6\x6e\x21\x71\x88\x95\x5b\x48\xf8\x0d\xdc\xad\x91\x8e\x09\x27\xaa\xbf\x22\x3c\xc3\xbe\x6d\x00\x74\x45\x59\x39\x99\x9a\x96\x45\xee\xcc\x83\x93\x15\xa9\x67\x46\xc6\xfd\x58\x0a\x43\x98\x40\x05\x19\x77\xf6\x73\xa6\x4d\x3f\xc7\xff\x9c\xc7\x6e\x79\xaf\xf0\x82\x63\xb2\x5b\x59\x38\x13\xd8\xaf\xd8\x9f\xd6\x0a\xb7\xa7\xe8\x6c\x25\x81\x08\x38\x83\xa8\x06\x32\xb5\x7a\x3d\x93\x9c\xb6\x9b\x25\x61\xdc\xb2\x25\x56\xac\x7d\xc0\x42\x99\x5e\x72\xb2\x9e\x16\x30\x74\x30\x58\x56\x6a\x8c\x2d\x36\x37\x31\xda\x27\x90\xa7\x47\xd8\x35\x69\x5d\xa8\x7e\x8c\x9c\x77\xd3\x6c\xa0\x31\xe1\x6c\x2e\xa6\xa0\xac\xb9\xee\x48\x77\xd7\x8a\x33\x42\xe7\x3e\x5c\x1e\x4c\x5c\x17\x6f\xbc\x5b\x1f\xde\x70\x62\x22\x0f\x82\x19\x97\xf1\xcd\xcb\x93\x96\xc8\xa8\xef\x75\x15\x88\x51\x18\x54\x2f\xf7\x47\x41\xad\x45\x98\x58\x0f\x37\xfa\x8f\x8b\xdf\xcf\xc8\xf8\xa2\x1b\xe7\x93\x64\x18\x5f\x38\x7b\x37\x61\x9a\xc3\xac\xed\x65\x8b\xa7\x7e\x2d\xce\x3d\x68\x5d\x07\xf9\x4d\x3c\x29\x42\x59\xa6\x6d\x9a\xdc\xd6\x3d\x1a\x06\x65\x87\x7d\xb2\xf1\xc1\x41\x8d\xfe\x76\xc5\xc0\x8e\xe6\x6d\x7b\x18\x14\x47\x0f\xfb\x68\x3b\x95\x92\x78\x98\x9e\x02\xa3\x97\xbd\xfc\xb8\xd1\x6b\x3d\x8d\xa4\xa7\x9b\xf5\xa3\xe8\x3a\x2f\x2b\x32\x81\x57\x52\x18\x14\x46\x87\x41\x3a\xaa\xe6\x29\x5b\x15\x04\xdd\x1a\xd2\xab\x0e\x0b\x61\xc6\xab\xd9\xcd\x98\x53\xe8\x6a\x8f\x21\x67\x91\xf3\x0a\x10\x92\x52\xbf\x67\x86\xe8\x1b\x3d\x58\x5a\x61\x7b\x91\xf3\x12\x06\x64\x67\x4b\xc6\xeb\x03\x35\x0e\x2d\x7c\xfc\xdc\xde\xbe\xfe\x84\x3f\x65\xa8\x4d\x2f\x0a\xf5\x92\x08\x88\x39\xd1\xfa\xb2\x97\xa7\x46\x2f\x7a\x1f\x06\x76\x34\xda\x2c\x6b\xc8\x52\x78\xb6\xc9\xec\x58\x81\xae\x89\xbe\xe9\x96\xc5\xae\x38\x56\x8c\x63\xa5\xfa\xa8\x98\x54\xcc\xac\xfd\x92\xbd\x29\x25\xab\x56\x3d\x90\x74\xf7\x31\xe1\x15\xaa\x15\x8b\xd1\x2f\xef\x95\x63\xc9\x72\xe1\x71\x22\x87\x41\x3d\x12\xeb\x1b\x4e\x5c\xb9\xb7\x42\x36\x21\xbd\x17\x5d\xe5\x63\xf0\x57\x3b\x06\xd7\x76\xcc\x0a\xe4\x92\xdb\xb2\x0a\x03\xca\x56\x6e\x15\xd9\x7c\xe4\x69\x5a\xaa\xea\x82\x87\x93\x94\x61\x3a\x2a\x52\xb5\x35\xd7\xd2\x91\x23\x6b\x59\x40\xae\xe5\xd2\x31\x50\x29\x40\xf9\xb2\x8c\xc2\x60\x19\x9d\x9c\xec\xea\x9c\x9e\x39\x8c\x9c\x34\x73\x52\x29\x3d\x73\x04\x5b\x6e\x67\x80\x69\x20\xb0\x40\xad\xc9\x1c\x21\xd3\x48\x21\x91\x0a\x98\x3d\x89\xb0\x64\x5d\xc0\xa1\xc9\xd3\x60\xcb\xb9\x5e\x65\x8a\x26\x69\x63\x8b\x4d\x4f\xdf\xdb\xa9\x24\x66\x7b\x75\xe3\x8e\xaa\x28\x34\x34\xfa\xd1\xee\x0b\x03\x43\xf3\x37\xeb\x96\xcd\xcb\x3b\x32\x43\xbe\x79\x7b\x8d\x3a\x56\x6c\x59\xde\xf1\xd0\x28\x0c\x8c\xda\x61\x14\x78\x38\x85\xa6\xa8\xd9\x1d\x11\x56\x89\xe3\x0b\x7b\x43\x23\x56\x88\xd7\x32\xbb\xf5\x23\x13\x66\x32\xee\x45\xf9\x47\x11\x59\x1d\xbb\xba\xe6\x96\x11\xa3\xd6\x3d\x26\x45\x60\xd4\xc2\x85\x7d\xb2\xbe\x00\x23\x41\xa1\x51\x0c\x57\x08\xd6\x31\x7e\x3a\x4d\xd3\x34\x72\xaa\x61\x95\x30\xc8\x7d\xe7\x64\xd6\xae\xcf\x5b\xc2\xae\x28\xa6\x45\xc1\xdc\x09\x36\x3b\x58\xc4\xd9\x1c\x05\x2a\x16\x17\x4a\x94\x41\xf7\x6b\x60\x3d\x7e\x60\xdd\x27\x68\xf6\x68\x93\x97\xb1\xbb\x29\xa4\x8d\xca\x2b\x66\xf1\xf9\x74\x55\x8a\x89\xc1\xb9\x54\xeb\x5f\x96\x56\xcb\x4d\x07\x71\x17\xad\x76\x7b\x13\xb7\xff\x78\x9a\xfa\xc5\x45\x6f\xfd\xcb\x72\x1a\xcd\xf0\x1f\x94\x98\x9f\x5b\x82\x1d\x07\x34\xdd\x80\xe3\x8b\xc5\x1d\xe0\xa9\x26\x72\xf0\x11\x80\x22\x5b\x14\x2d\x8e\x91\x40\xf3\x72\x3f\x2b\x01\xb5\x4a\x06\xe0\xb8\x42\xae\x73\x4c\xda\xea\xef\xe2\xd0\xf6\xc6\xa9\x06\x43\x3e\x10\xaa\x20\xe8\x03\x59\x6c\x41\xe7\x43\xb6\x98\xa1\xba\x33\xea\x78\x30\xc7\x87\x38\x1e\xf0\xf3\x84\x15\x8d\xde\xc9\x2f\x2d\x2e\x34\x34\x1a\xb6\x4f\x95\xad\xa7\x6f\x41\xd3\xf9\x77\x15\xe6\x3d\x52\x96\x2d\xda\x99\x9e\x3e\xb2\x3c\x7f\x62\xf3\xb4\x9d\xe5\xe8\xe1\xa5\x69\xa4\xc5\x4e\x52\x9c\xdc\x2d\x13\x6a\x87\xb0\xda\x41\xcb\xd3\x88\x95\x73\xa0\x51\xad\x50\x17\xd1\xaf\x50\xcb\x4c\xc5\xf8\xc0\x71\xff\x1e\x4d\x2a\x29\xd4\xc2\xbf\x3a\x76\xd4\x1a\xb1\x4f\xa8\x97\x52\x68\xac\x8f\x3e\x72\x6a\xbc\x52\xd8\x5a\x58\x7d\x58\xe8\x36\xbc\x6d\x85\xf5\x5e\xfb\xbe\x46\x88\x7f\x42\xd2\xd2\x6d\xfa\x44\xf5\x1f\x25\x7f\x36\xca\x7e\x5e\xb6\x43\xe5\xc3\x78\xb4\xf8\x0a\x40\x71\x9c\x9f\x65\xc9\xe0\xcd\x62\x69\x01\x69\xe0\x1d\xff\x06\x16\x78\x8d\x1c\x0f\xb1\xc0\x7d\x1c\xfe\xd4\x6d\xf1\x8e\xe9\x96\x66\xf0\xeb\xe9\xd1\x19\x60\xa0\x8d\x42\xd2\x81\x7f\x5f\x0d\x56\x60\x83\x29\xd5\x1d\xd5\x5d\x2f\xca\xd2\x51\x79\x31\x56\xc3\x86\xb6\xff\x9c\x6d\x6f\xad\x77\x2a\x75\x85\x10\x85\x35\xeb\x65\xff\x83\x34\x96\x53\xf9\xf6\xea\xfb\xef\xeb\xd3\x7f\x26\x2b\x52\x1f\xf9\xb8\x36\xa9\x14\xce\x98\x63\x9b\x1d\x8c\xd8\xc5\x87\x1a\x74\xa8\xdc\x12\x54\x66\xbe\x2b\x06\x1a\x15\x13\x4d\x67\xf8\x5b\xe7\x7d\x3b\xba\xe6\x12\x2e\x49\x23\x54\xeb\x1e\xf7\x08\x9e\xef\xf2\xc8\xed\xa5\xd6\x25\x76\xc7\x86\x43\xa7\xf6\x0a\xcd\x84\x39\x1b\x79\x84\xce\xc7\xfd\x8c\x3e\x6b\xd4\xb0\x22\x8a\xe5\xff\x75\xe3\x28\xe6\x26\x05\x14\xb1\xa4\x4c\xcc\x07\xf0\x56\x60\x92\xb0\x98\xa1\x30\xf9\x4d\x66\x35\x03\x02\xe7\xc4\xb0\x15\x82\xc8\x3b\x70\x0d\xff\xfb\xcf\x7f\x81\x25\xb0\x96\x99\x82\xfc\x76\xc9\x1e\x13\x38\xbb\x41\xbe\xb6\x07\x84\x94\xd8\xb5\xd5\xa6\x3c\xb6\xf5\x73\x7b\x7c\x00\x9d\x4b\x07\x4c\x68\x83\x84\x0e\xfc\x62\x76\x68\xc0\x7c\xa7\xd2\x96\x89\xbb\x58\x70\x32\xf6\x5b\x70\x32\x7e\xca\x16\x9c\x8c\xf7\x5b\xb0\x4d\x03\x2e\xed\x71\xb6\x65\x53\xe0\x9b\xdd\x6b\xc7\xac\x2d\x14\xb3\xa3\x63\xd1\xbf\xa7\x8b\x5e\x57\x64\x1c\xaf\x96\x37\x3e\xb2\xa3\x03\xa4\x5d\xad\x47\x74\x97\x6e\x73\x97\x3e\xbe\x74\x5c\xb1\xb9\x40\x0a\x4c\x98\x22\x58\x07\x70\x9d\xa2\x46\x58\x48\x85\xb0\xc9\x09\xbe\x2e\xb6\x60\x33\x1f\x4c\x4a\x04\x28\x9c\x67\x16\x37\x73\x39\xf4\x37\xae\x0e\xba\xcd\xfd\xfa\xf8\xfa\xf0\xe0\x66\x9a\x8c\x3b\xcc\xf4\x88\x31\x95\xb0\x5b\xa4\xde\xa0\x2a\x67\xfc\xfc\x7e\xe0\x5f\xc8\x5a\x43\x62\xab\xe0\x6c\x6d\x50\x0f\xe0\x7d\xcd\x14\x85\xc2\x59\x89\x1a\x49\x59\x09\x81\x28\x04\x99\x18\x14\x30\xcf\x8f\x9e\xaa\x58\x37\xfa\xfb\xe8\xe2\x81\x4b\xc7\x71\x96\xf0\xc6\x4d\x39\xd3\x69\x89\xfc\x0b\x25\xfb\x4c\x61\xcb\xff\x7e\x53\x9c\x4f\x9e\x48\xb9\x69\x8f\x0d\x7d\x60\x70\x7c\xe3\x82\xd0\xee\x5a\x7d\xa8\x6f\x9f\x42\xce\xce\xa4\xe4\x1e\x5d\xec\xf0\x21\x3d\x6f\xfb\x7a\x3b\x83\x44\x1c\x34\xb9\xdf\x0b\xe5\xc5\x7c\xd3\x07\xe5\x4d\xbd\xd7\x03\x50\xcc\xc2\x22\xd3\x06\x48\xe1\x8f\xf2\x1b\x42\x90\xff\xa6\xa1\xac\xb8\x14\xa4\x82\x17\xfd\x19\x33\xf0\xc3\xd5\xab\xb7\x6f\xf3\xef\x80\xb5\x78\xab\x8b\xe1\x55\xc7\x9c\x36\x2a\xc8\x04\xb3\xec\x0e\xf7\x99\x8d\x1e\x9f\xd3\xd6\xd5\xc9\xaf\x31\xf5\x9e\xac\x37\xaa\x12\xb1\x06\xa2\x66\xcc\x28\xa2\xd6\xa0\xf1\xa7\x0c\x45\x9c\x7f\x9d\xaa\x2b\x2c\xbb\x14\xfd\xe3\xda\xe0\x1e\x65\xef\xa4\x64\xed\xe0\xed\x1c\xba\xc3\xa0\x18\x0e\x83\xf2\xe7\x2c\xff\x0f\x00\x00\xff\xff\xc6\x12\x89\xa1\xe0\x32\x00\x00")

func index_html() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"_config.yml": config_yml,
	"bindata.go":  bindata_go,
	"gen.go":      gen_go,
	"index.html":  index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"_config.yml": &_bintree_t{config_yml, map[string]*_bintree_t{}},
	"bindata.go":  &_bintree_t{bindata_go, map[string]*_bintree_t{}},
	"gen.go":      &_bintree_t{gen_go, map[string]*_bintree_t{}},
	"index.html":  &_bintree_t{index_html, map[string]*_bintree_t{}},
}}
