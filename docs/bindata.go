package docs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _gen_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\x50\xd0\x2d\xc8\x4e\x57\x48\xc9\x4f\x2e\x56\xd0\xd3\xd7\xd3\xd3\xe3\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x05\x8b\x71\x01\x02\x00\x00\xff\xff\x8a\x3d\x44\x8a\x38\x00\x00\x00")

func gen_go() ([]byte, error) {
	return bindata_read(
		_gen_go,
		"gen.go",
	)
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6f\x6f\xdb\xba\xd5\x7f\x9f\x4f\x71\x1e\x15\x0f\xb0\x8b\x5b\x5b\x8e\xe3\xb8\x99\xab\x68\xb8\x6b\x7b\xb1\x0e\x6d\x57\x34\xe9\x80\xbd\xd9\x40\x8b\x47\x16\x11\x9a\xf4\x25\xa9\x34\xde\x30\x60\xdf\x61\xdf\x70\x9f\x64\xa0\x24\xcb\x94\x45\xc9\xb1\x9b\xb6\xe9\xc5\x90\x17\x96\x78\xc8\xf3\xf7\xc7\x73\x0e\x69\x27\xfa\xbf\x97\x7f\x7a\x71\xfd\x97\xf7\xaf\x20\x33\x4b\x1e\x9f\x9c\x44\xe5\x27\x40\x94\x21\xa1\xf6\x01\x20\x32\xcc\x70\x8c\xdf\x2b\x69\x64\x22\x39\xbc\x94\x49\xbe\x44\x61\x88\x61\x52\x44\x61\x49\x2d\x67\x2e\xd1\x10\x48\x32\xa2\x34\x9a\xcb\xe0\xe3\xf5\xcf\x83\x8b\xa0\x22\x71\x26\x6e\x40\x21\xbf\x0c\xb4\x59\x73\xd4\x19\xa2\x09\xc0\xac\x57\x78\x19\x18\xbc\x33\x61\xa2\x75\x00\x99\xc2\xf4\x32\xc8\x8c\x59\xe9\x59\x18\xa6\x52\x18\x3d\x5c\x48\xb9\xe0\x48\x56\x4c\x0f\x13\xb9\xb4\xf3\x7e\x97\x92\x25\xe3\xeb\xcb\x8f\xf3\x5c\x98\x7c\x36\x19\x8d\x9e\x3e\x1b\x8d\x9e\x4e\x46\x23\x66\x08\x67\x49\x10\x56\x42\x0b\x51\xe5\x33\xc0\x5c\xd2\x35\xfc\xa3\x7a\x01\xf8\xc4\xa8\xc9\x66\x30\x1d\xe1\xf2\x79\x3d\xb8\x24\x6a\xc1\xc4\x0c\x4e\x71\x09\x24\x37\x72\x4b\x49\x24\x97\x6a\x06\x4f\xc6\xe3\xf1\x76\xd0\x2a\x38\x28\x95\x99\x41\x50\xaa\x13\x3c\x05\x4d\x84\x1e\x68\x54\x2c\xdd\x4e\x5d\x11\x4a\x99\x58\x0c\xe6\xd2\x18\xb9\x9c\xc1\x64\x2b\xf6\x9f\x27\xd5\x43\x76\xea\xe8\x57\xf0\xfe\x84\x6c\x91\x99\x19\x08\xa9\x96\x84\x6f\xb9\xcd\xa5\xa2\xa8\x6a\x66\xa7\xab\x3b\xd0\x92\x33\x0a\x4f\x08\x21\xdd\x42\x47\xc3\x73\xbc\x6b\x8b\x1d\x3b\x62\x1f\x82\xb3\xe3\xc7\xe1\x39\x2e\x61\xd4\x16\x79\xf6\x4d\x2c\x25\x8e\x54\x0b\xba\x01\xc5\x44\xaa\x02\xc8\x56\xb2\xc0\x76\xbc\xcf\xa7\xcf\x70\x7c\xde\xe2\x64\xc8\x9c\x63\x1b\x4d\xa7\xa3\xd1\xff\xef\xc0\x43\xb3\xbf\xe3\x0c\x2e\xdc\xf1\xca\xa6\x44\x72\x4e\x56\x1a\x67\xb0\x79\x6a\x8b\xb1\xdb\xb0\xcb\x55\xcf\x46\x23\x87\x27\x49\x6e\x16\x4a\xe6\x82\x0e\x36\xaa\xd3\xc4\xfe\xb5\x79\x16\x1b\xc1\xa8\x99\x30\xd9\x20\xc9\x18\xa7\xbf\xc1\x5b\x14\x3f\xb8\x20\x68\x33\x4b\xe7\xf6\xaf\xcd\x8c\xb6\xb0\xd3\x08\x52\x92\x24\xad\x20\x55\xd1\x81\xb1\x27\x42\x86\xc2\x6a\x37\x48\x4c\x50\x14\xa6\xd8\x94\x6d\x84\xb5\xb1\x65\x59\x38\xb6\x9d\xfe\xd0\xc5\x6f\xf4\x1c\x60\x77\xf1\x66\x60\x98\x32\xe4\x74\x50\x86\xd9\xd0\x1d\x7e\xf5\x34\x27\xf0\xee\x7e\xde\xc7\x63\xfc\x00\x3c\xce\xbc\x3c\xa6\x87\xb0\x98\x78\x59\xb8\x79\xaf\xed\x17\xbc\x33\x28\x34\x93\xe2\x33\x7d\xd3\xcb\xe7\x00\xff\xf4\xf2\xf1\xfb\xe8\x70\x3e\x7e\x47\x9d\x1f\xca\xe6\xfc\x18\x7f\x8b\x7c\xf9\xb9\xae\xee\x60\x71\x88\x97\x3b\x58\xf8\x1d\xdc\x6f\x91\x4e\x08\x27\x6a\x70\x4b\x78\x8e\x03\xdb\x00\xe8\x0d\x67\xe5\xec\xd4\xac\x4a\x72\x67\x9e\x3a\xb9\x61\xf5\xc4\xc8\x64\x90\x48\x61\x08\x13\xa8\x20\xe7\xce\x7a\xce\xb4\x19\x14\xf5\xbf\x90\xb1\x9b\xde\x37\xf5\x82\x63\xba\x9b\x59\x38\x13\x38\xd8\x88\x3f\x6d\x24\x6e\x4f\xd2\xd9\x6a\x02\x31\x70\x06\x71\xa3\xc8\x34\xf2\xf5\x5c\x72\xda\xed\x96\x94\x71\x2b\x96\x58\xb5\xf6\x15\x16\xca\xf4\x8a\x93\xf5\xac\x2c\x43\x07\x17\xcb\x8d\x19\x13\x5b\x9b\xdb\x35\xda\xa7\x90\xa7\x47\xd8\x75\x69\x53\xa9\x41\x82\x9c\xf7\xf3\x6c\x55\x63\xc2\xd9\x42\xcc\x40\x59\x77\xdd\x93\xef\xae\x17\xe7\x84\x2e\x7c\x75\x79\x38\x75\x43\x5c\x47\xb7\x39\x5c\x4b\x62\xa2\x00\xc1\x9c\xcb\xe4\xe6\xf9\x49\x07\x32\x9a\x6b\x5d\x03\x12\x14\x06\xd5\xf3\xfd\x28\x68\xb4\x08\x53\x1b\xe1\x56\xff\x71\xf1\xdb\x39\x99\x5c\xf4\xd7\xf9\x34\x1d\x25\x17\xce\xda\x1a\xa6\x45\x99\xb5\xbd\x6c\xf9\x34\x68\xe0\xdc\x53\xad\x9b\x45\xbe\xc6\x93\x22\x94\xe5\xda\x6e\x93\xbb\x66\x44\xa3\xb0\xea\xb0\x4f\xea\x18\x1c\xd4\xe8\x6f\x67\x0c\xed\x68\xd1\xb6\x47\x61\x79\xf4\xb0\x8f\xb6\x53\xa9\x98\x47\xd9\x29\x30\x7a\x19\x14\xc7\x8d\xa0\xf3\x34\x92\x9d\xd6\xf3\xc7\xf1\x75\x91\x56\x64\x0a\x2f\xa4\x30\x28\x8c\x8e\xc2\x6c\xbc\xa1\x53\x76\x5b\x32\x74\x73\x48\xb0\x39\x2c\x44\x39\xdf\x50\xeb\x31\x27\xd1\x35\x1e\x23\xce\x62\xe7\x15\x20\x22\x95\x7d\x4f\x0c\xd1\x37\x7a\xb8\xb2\xca\x06\xb1\xf3\x12\x85\x64\x67\x49\xce\x9b\x03\x0d\x09\x1d\x72\xfc\xd2\x5e\xbf\xfc\x80\xbf\xe4\xa8\x4d\x10\x47\x7a\x45\x04\x24\x9c\x68\x7d\x19\x14\x5b\x23\x88\xdf\x46\xa1\x1d\x8d\xeb\x69\x2d\x5d\xca\xc8\xb6\x85\x1d\xab\xd0\x35\xd1\x37\xfd\xba\xd8\x19\xc7\xaa\x71\xac\x56\xef\x15\x93\x8a\x99\xb5\x5f\xb3\x57\x95\x66\x9b\x59\x0f\xa4\xdd\xe7\xb8\xf0\x0a\xd5\x2d\x4b\xd0\xaf\xef\x95\xe3\xc9\x6a\xe2\x71\x2a\x47\x61\x13\x89\xcd\x05\x27\xae\xde\x5b\x25\xdb\x25\x3d\x88\xaf\x8a\x31\xf8\xb3\x1d\x83\x6b\x3b\x66\x15\x72\xd9\x6d\x45\x45\x21\x65\xb7\x6e\x16\xa9\x3f\x8a\x6d\x5a\x99\xea\x16\x0f\x67\x53\x46\xd9\xb8\xdc\xaa\x9d\x7b\x2d\x1b\x3b\xba\x56\x09\xe4\x5a\xae\x1c\x07\x55\x0a\x54\x2f\xab\x38\x0a\x57\xf1\xc9\xc9\xae\xcd\xd9\x99\x23\xc8\xd9\x66\xce\x56\xca\xce\x1c\xc5\x9a\x7c\x9a\x39\xa3\x6c\x79\x6a\xcb\xea\x0e\x3d\xd8\xc9\x0b\x66\x7b\x11\xe3\x8e\xaa\x38\x32\x34\xfe\xd9\xae\x8b\x42\x43\x8b\x37\xeb\xe4\xfa\xe5\x0d\x99\x23\xaf\xdf\x5e\xa2\x4e\x14\x5b\x55\x37\x36\x34\x8e\x42\xa3\x76\x04\x85\x1e\x49\x91\x29\x33\x70\x0f\x5e\x36\xea\xf8\x40\x6c\x68\xcc\x4a\xf5\x3a\xa8\xdb\xa8\x30\x61\xa6\x93\x20\x2e\x3e\x4a\x9c\xf4\xac\xea\xa3\xad\x62\xb0\x4e\xf7\xcf\x69\x9b\xdd\x42\x7f\xcb\xe2\x28\x2c\xe2\xe2\xec\x81\xdd\x78\x76\x00\xa4\x4c\x7b\x65\x6a\xfb\x1f\x2c\xdc\xe1\xef\x0e\x16\x7b\xac\x29\x52\xca\xfd\x0c\xd2\x46\x15\xd9\xab\xfc\x7c\xbc\x26\x25\xc4\xe0\x42\xaa\xf5\xaf\xcb\xaa\x55\x5d\xcd\xef\x63\xd5\x6e\x9f\xe0\xf6\x02\x8f\xd3\xbe\xa4\xec\x73\x7f\x5d\x41\xa3\x39\xfe\x8d\x12\xf3\xbd\x6d\xb0\xe3\x4a\x49\x7f\x49\xf1\x61\xd1\x57\x5a\xb6\x66\xb8\xe5\x64\x7b\x89\xd3\xa8\x26\xbe\x5a\xb2\xa9\x24\xef\xc8\x72\x5b\x3b\xde\xe5\xcb\x39\xaa\x7b\x17\x0f\x4f\xe9\xf0\x15\x0e\x4f\x0d\xf3\xa0\x83\xc6\x6f\xe4\xa7\x8e\x48\x18\x1a\x8f\xba\x49\x95\x4f\x7c\x13\xda\x31\xbc\xaf\x32\x6f\x91\xb2\x7c\xd9\x2d\xf4\xf4\x2b\xeb\xf3\x07\xb6\xc8\xba\x45\x8e\x1f\x5e\x9b\x16\xba\x77\xb0\x7d\x72\x3f\x40\x37\xce\x35\x8d\xb3\xcb\x17\x85\xf5\x5b\x34\x99\xa4\xd0\x40\x77\xd5\xc2\x43\xa3\x5d\xfa\x80\x7a\x25\x85\xc6\xe6\xe8\x57\x46\xfe\x0b\x85\x9d\xe9\xcf\x57\xb1\xdc\xc6\xb3\x2b\xfd\x7d\xd6\xba\x2f\x81\xe0\x0f\x48\x3a\x7a\x42\x9f\xaa\xfe\xc3\xd7\x77\x63\xec\xc7\x55\x77\x41\x7b\x98\x88\x96\x5f\x9a\x97\x07\xe0\x79\x9e\x0e\x5f\x2d\x57\xb6\x6c\x0c\xbd\xe3\xdf\xc0\x03\x2f\x91\xe3\x21\x1e\xf8\x9c\x80\x3f\x76\x5f\xbc\x61\xba\xa3\x65\xfb\x72\x76\xf4\x02\x0c\xb4\x51\x48\x7a\xca\xdb\x17\xab\x1a\x50\x97\x8c\xcd\xad\xce\x7d\xaf\x96\xb2\x71\x75\x95\xd4\xa8\x0d\x5d\xdf\x35\x6d\xef\x79\x77\x32\xf5\xa6\x42\x94\xde\x6c\xa6\xfd\x77\xd2\x58\x49\xd5\xdb\x8b\x1f\x7f\x6c\x92\xff\x48\x6e\x49\x73\xe4\xfd\xda\x64\x52\x38\x63\x8e\x6f\x76\x6a\xc4\x6e\x7d\x68\x94\x0e\x55\x78\x82\xca\xdc\x77\x11\x40\xe3\x92\xd0\x0e\x86\xbf\xc1\xdd\xb7\xa2\x8f\x96\x72\x49\x5a\x50\x6d\x46\xdc\xa3\x78\xb1\xca\xa3\xb7\x97\x5b\x9f\xda\x3d\x0b\x0e\x25\xed\x55\x9a\x09\x73\x36\xf6\x28\x5d\x8c\xfb\x05\x7d\xd4\xa8\xe1\x96\x28\x56\x7c\x4f\xc5\x51\x2c\x4c\x06\x28\x12\x49\x99\x58\x0c\xe1\xb5\xc0\x34\x65\x09\x43\x61\x20\x95\xaa\xa6\x80\xc0\x05\x31\xec\x16\x41\x14\x0d\xb6\x86\xff\xfc\xeb\xdf\xc0\x52\x58\xcb\x5c\x41\x71\x07\x04\x4c\x03\x67\x37\xc8\xd7\x60\x24\x64\xc4\xce\xdd\x2c\x2a\xb0\xad\x9f\x42\xae\x11\x74\xa1\x1d\x30\xa1\x0d\x12\x3a\xf4\xab\xd9\x63\x01\xf3\x9d\x1d\x3b\x08\xf7\xf1\xe0\x74\xe2\xf7\xe0\x74\xf2\x98\x3d\x38\x9d\xec\xf7\x60\x97\x05\x5c\xda\x43\x67\xc7\xa2\xd0\x47\xdd\xeb\xc7\xbc\x0b\x8a\xf9\xd1\x58\xf4\xaf\xe9\xe3\xd7\x87\x8c\xe3\xcd\xf2\xe2\x23\x3f\x1a\x20\xdd\x66\x7d\xc5\x70\xe9\xae\x70\xe9\xe3\x53\xc7\x15\x5b\x08\xa4\xc0\x84\x29\xc1\x3a\x84\xeb\x0c\x35\xc2\x52\x2a\x84\x7a\x4f\xf0\x75\xb9\x04\xdb\xfb\xc1\x64\x44\x80\xc2\x45\x6e\xeb\x66\xa1\x87\xfe\xc6\xd9\x41\x77\x85\x5f\x1f\x9f\x1f\x1e\xdc\x4d\xd3\x49\x8f\x9b\xbe\x22\xa6\x52\x76\x87\xd4\x0b\xaa\x8a\xe2\x97\xf7\x13\xff\x44\xd6\x1a\x52\x9b\x05\xe7\x6b\x83\x7a\x08\x6f\x1b\xae\x28\x0d\xce\xab\xaa\x91\x56\x99\x10\x88\x42\x90\xa9\x41\x01\x8b\xe2\xe8\xa9\xca\x79\xe3\xbf\x8e\x2f\x1e\x38\x75\x1c\xe7\x09\x2f\x6e\x2a\x4a\xaf\x27\x8a\x9f\x60\xec\x73\x85\x4d\xff\xfb\x5d\x71\x3e\x7d\x24\xe9\xa6\x1b\x1b\xfa\x40\x70\x7c\xe3\x84\xd0\x1d\x5a\x7d\x68\x6c\x1f\xc3\x9e\x9d\x4b\xc9\x3d\xb6\xd8\xe1\x43\x7a\xde\xee\xf9\x96\x82\x44\x1c\x44\xdc\x1f\x85\xea\xfa\xbc\x1d\x83\xea\x3e\xdd\x1b\x01\x28\xa9\xb0\xcc\xb5\x01\x52\xc6\xa3\xfa\x4d\x0d\x14\xff\x05\x50\x65\x5c\x0a\x52\xc1\xb3\xc1\x9c\x19\xf8\xe9\xea\xc5\xeb\xd7\xc5\xaf\xa6\x3a\xa2\xd5\x27\xf0\xaa\x87\xa6\x8d\x0a\x73\xc1\xac\xb8\xc3\x63\x66\xd1\xe3\x0b\xda\x7a\x73\xf2\x6b\x91\xde\x92\x75\x6d\x2a\x11\x6b\x20\x6a\xce\x8c\x22\x6a\x0d\x1a\x7f\xc9\x51\x24\xc5\x0f\x90\xfa\x60\xd9\x67\xe8\xef\xd7\x06\xf7\x18\x7b\x2f\x23\x1b\x07\x6f\xe7\xd0\x1d\x85\xe5\x70\x14\x56\xff\x00\xf2\xdf\x00\x00\x00\xff\xff\xff\x76\x92\xde\x12\x32\x00\x00")

func index_html() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"bindata.go": bindata_go,
	"gen.go":     gen_go,
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{}},
	"gen.go":     &_bintree_t{gen_go, map[string]*_bintree_t{}},
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{}},
}}
